#!/usr/bin/env ruby
module Togglmine; VERSION = '0.0.5'; end

require 'builder'
require 'yaml'
require 'json'
require 'uri'
require 'open-uri'
require 'time'
require 'optparse'

def build_xml(opt)
  xml = Builder::XmlMarkup.new(indent: 2)
  xml.instruct! :xml, encoding: "UTF-8"
  xml.time_entry do |time_entry|
    opt.each { |k, v| time_entry.tag!(k, v) }
  end
end

def resolve_tag_value_to_activity_id(tags, mapping)
  activity = tags.map { |tag| mapping[tag] }
                 .reject(&:nil?)
                 .first
  activity && activity['id']
end

def convert_msec_to_hour(msec)
  (msec.to_f / 1000 / 60 / 60).round(2)
end

def accumulate(toggl_data)
  toggl_data.inject([]) do |m, toggl_entry|
    matched_entry = m.find do |e|
      e['description'] == toggl_entry['description'] && e['tags'] == toggl_entry['tags']
    end

    if matched_entry
      matched_entry['dur'] = matched_entry['dur'].to_i + toggl_entry['dur'].to_i
    else
      m << toggl_entry
    end
    m
  end
end

def parse_options
  opts = {}
  opt = OptionParser.new('Usage:', 48)
  opt.separator '  togglmine [date]'
  opt.separator '  togglmine [options]'
  opt.separator ''
  opt.separator 'date examples:'
  opt.separator '         - 2017-02-10'
  opt.separator '         - 1           => means yesterday'
  opt.separator ''

  opt.separator 'Options:'
  opt.on('-d', '--update-default-issue-id default_issue_id',
         'Update default_issue_id in togglmine.yaml') { |v| opts['default_issue_id'] = v }
  opt.on('', '--init-config', 'Create togglmine.yaml') { |v| opts['init'] = v }
  opt.version = ::Togglmine::VERSION

  args = opt.parse(ARGV)
  [opts, args]
end

def update_default_issue_id(id)
  puts 'trying to update default_issue_id.'
  config = YAML.load_file("#{ENV['HOME']}/.togglmine.yaml")
  puts "current: #{config['default_issue_id']}"
  puts "tobe: #{id}"
  print 'ok? [y/n]: '
  ans = STDIN.gets
  if ans =~ /^[Yy]/
    row_text = File.read("#{ENV['HOME']}/.togglmine.yaml")
    open("#{ENV['HOME']}/.togglmine.yaml", 'w') do |f|
      f.write row_text.gsub(/default_issue_id:.*$/, "default_issue_id: #{id}")
    end
    puts 'updated.'
  else
    puts 'quit'
  end
end

def init_config
  if File.exists? "#{ENV['HOME']}/.togglmine.yaml"
    puts '~/.togglmine.yaml already exists.'
    return
  end
  require 'fileutils'
  FileUtils.cp(File.expand_path('../../asset/template_togglmine.yaml', __FILE__), "#{ENV['HOME']}/.togglmine.yaml")
  puts "Put template file on #{ENV['HOME']}/.togglmine.yaml"
end

def target_date(arg)
  return Date.today.strftime('%Y-%m-%d') unless arg
  return arg if arg =~ /\A\d{4}-\d{2}-\d{2}\z/
  return (Date.today - arg.to_i).strftime('%Y-%m-%d') if (1..31).cover? arg.to_i
  raise "You can pass a parameter either YYYY-MM-DD format or integer less than or equal to 31 but: #{arg}"
end

opts, args = parse_options

if opts['default_issue_id']
  update_default_issue_id(opts['default_issue_id'])
  exit
end

if opts['init']
  init_config
  exit
end

# main
config = YAML.load_file("#{ENV['HOME']}/.togglmine.yaml")
target_date = target_date(args[0])

toggl_url = URI.parse 'https://toggl.com/reports/api/v2/details'
toggl_url.query = URI.encode_www_form(
  user_agent: config['toggl']['user_agent'],
  workspace_id: config['toggl']['workspace_id'],
  since: target_date,
  until: target_date
)
toggl_data = open(toggl_url, http_basic_authentication: [config['toggl']['apikey'], 'api_token'])
toggl_data_as_json = JSON.parse(toggl_data.read)

puts config['header'] if config['header']

accumulate(toggl_data_as_json['data']).each do |toggl_entry|
  activity_id = resolve_tag_value_to_activity_id(toggl_entry['tags'], config['tag_mapping']) || config['default_activity_id']
  issue_id_in_description = toggl_entry['description'][/(?<=#)\d+/]
  opt = {
    issue_id: issue_id_in_description || config['default_issue_id'],
    activity_id: activity_id,
    activity_name: Hash[config['tag_mapping'].map { |_, v| [v['id'], v['name']] }][activity_id],
    spent_on: target_date,
    hours: convert_msec_to_hour(toggl_entry['dur']),
    comments: issue_id_in_description ? (toggl_entry['description'][/\|\s*(.*)\z/, 1] || "") : toggl_entry['description'].gsub(/\A.*\|\s*/, "")
  }
  insecure_opt = "--insecure" if config['redmine']['insecure']

  puts "## #{toggl_entry['description']}"
  puts %W(curl -vX POST #{insecure_opt} -H 'Content-Type: application/xml'
    -H 'X-Redmine-API-Key: #{config['redmine']['authentication']['apikey']}'
    #{URI.join(config['redmine']['url'], '/time_entries.xml')} --data ').join(' ')
  puts build_xml(opt) + "'"
  puts
end
